// SPDX-License-Identifier: (GPL-2.0+ OR MIT)
/*
 * Copyright (C) 2022 Microchip Technology Inc. and its subsidiaries.
 */

#if defined(linux)
/* We don't want "linux" expanded! */
#undef linux
#endif

fdt_high=0xffffffff
initrd_high=0xffffffff
baudrate=115200
bootargs=console=ttyS0,115200 root=/dev/ram0 loglevel=4 uio_pdrv_genirq.of_id=generic-uio
bootdelay=3
bootcmd=run mmc_boot
loadaddr=0x64000000
mmc_unzip_loadaddr=0x80000000
mmc_bak=6
mmc_boot=run mmc_tryboot;run mmc_swap; run mmc_tryboot
mmc_cur=5
mmc_dev=mmc 0
mmc_format=gpt guid ${mmc_dev} mmc_guid; gpt write ${mmc_dev} ${mmc_part}; env save
mmc_part=uuid_disk=${mmc_guid};name=fip,start=32K,size=128MiB,type=system;name=fip.bak,size=128MiB,type=system;name=Env,size=2MiB,type=data;name=Env.bak,size=2MiB,type=data;name=Boot0,size=1GiB,type=linux;name=Boot1,size=1GiB,type=linux;name=Data,size=-,type=linux
mmc_swap=env set _mmc_tmp ${mmc_bak}; env set mmc_bak ${mmc_cur}; env set mmc_cur ${_mmc_tmp}; env set _mmc_tmp; env save
mmc_tryboot=run mmc_load; if test $? = 0; then setenv mtdroot root_next=/dev/mmcblk0p${mmc_cur}; run ramboot; fi;
mmc_load=ext4load ${mmc_dev}:${mmc_cur} ${loadaddr} Image.itb
ramboot=bootm start ${loadaddr}#${pcb}; bootm loados ${loadaddr}#${pcb}; bootm ramdisk ${loadaddr}#${pcb}; run set_rootargs; run setup; bootm fdt ${loadaddr}#${pcb}; bootm prep ${loadaddr}#${pcb}; bootm go ${loadaddr}#${pcb}
setup=setenv bootargs console=${console} ${mtdparts} ${rootargs} ${mtdroot} fis_act=${active} boot_source=${boot_source} ${bootargs_extra}
rootargs_mmc=setenv rootargs root=/dev/mmcblk0p${mmc_cur} ro rootwait
rootargs_ram=setenv rootargs root=/dev/ram0 ro rootwait
set_rootargs=if test $initrd_start = 0; then run rootargs_mmc; else; run rootargs_ram; fi;
div_512=setexpr _tmp_ ${filesize} + 0x1ff; setexpr filesize_512 ${_tmp_} / 0x200; env set _tmp_
fip_fw=lan969x_a0.fip
fip_fw_dl=dhcp ${loadaddr} ${fip_fw}
nor_fip_upd=sf probe; sf update ${loadaddr} 0 ${filesize}
nor_fip_dlup=run fip_fw_dl; if test $? = 0; then run nor_fip_upd; fi;
mmc_fip0_upd=run div_512; mmc write ${loadaddr} ${mmc_offset_fip0} ${filesize_512}
mmc_fip0_dlup=run fip_fw_dl; if test $? = 0; then run mmc_fip0_upd; fi;
mmc_fip1_upd=run div_512; mmc write ${loadaddr} ${mmc_offset_fip1} ${filesize_512}
mmc_fip1_dlup=run fip_fw_dl; if test $? = 0; then run mmc_fip1_upd; fi;
mmc_fip01_dlup=run fip_fw_dl; if test $? = 0; then run mmc_fip0_upd; run mmc_fip1_upd; fi
mmc_fw=brsdk_standalone_arm64.ext4.gz
mmc_dl=dhcp ${loadaddr} ${mmc_fw}; unzip ${loadaddr} ${mmc_unzip_loadaddr}
mmc_boot0_upd=run div_512; mmc write ${mmc_unzip_loadaddr} ${mmc_offset_boot0} ${filesize_512}
mmc_boot0_dlup=run mmc_dl; run mmc_boot0_upd
mmc_boot1_upd=run div_512; mmc write ${mmc_unzip_loadaddr} ${mmc_offset_boot1} ${filesize_512}
mmc_boot1_dlup=run mmc_dl; run mmc_boot1_upd
mmc_boot01_dlup=run mmc_dl; run mmc_boot0_upd; run mmc_boot1_upd
mmc_offset_fip0=0x40
mmc_offset_fip1=0x40040
mmc_offset_boot0=0x82040
mmc_offset_boot1=0x282040
mmc_offset_data=0x482040
console=ttyS0,115200n8
mtdparts=mtdparts=spi0:1536k(fip),256k(Env),256k(Env.bk)
bootargs_extra=uio_pdrv_genirq.of_id=generic-uio loglevel=1
